سایت خود django
نصب و  روی  virtualenv
ایجاد پروژه
توضیح فایل ها 
اجرا اولیه python manage.py runserver
سوال :‌چگونه پورت دیفالت آن را تغییر دهیم و چگونه روی یک ای پی خاص اجرا کنیم ؟
ساخت اپ و توضیح ان که چه فرقی داره با project
اضافه کردن  app به installed_app
چرا باید آن را اضافه کنیم ؟ 
https://stackoverflow.com/questions/47684387/what-is-the-purpose-of-adding-to-installed-apps-in-django/47684488

تمرین : میخواهیم یک سایت فروشگاهی طراحی کنیم یک پروژه برای بسازید و اپ های مورد نیاز آن را برایش ایجاد کنید.

توضیح ابتدایی درمورد view , include url on mainUrl
مثال ساده httpResponse , نمایش hellowrld
from django.http import HttpResponse
def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")
توضیح در مورد orm 
توضیح در مورد python maigrate , python manage.py makemigrations
توضیح ابتدایی درمورد ادمین 
ساخت super user
نمایش ادمین 
تفاوت null,blank
بحث در مورد one to many , many to many
بحث در مورد on_delete
بحث در مورد db_index,unique,primay_key,default

لینک های که باید خوانده شود
https://docs.djangoproject.com/en/3.2/intro/tutorial03/
https://docs.djangoproject.com/en/3.2/topics/db/models/
https://docs.djangoproject.com/en/3.2/ref/models/fields/
بخث one to one  خوانده شود
و بعضی از فیلدها در لینک های بالا هست باید بخونید

روابط شیرین در on_delete :)
on_delete : https://stackoverflow.com/questions/38388423/what-does-on-delete-do-on-django-models

defult django user:
from django.contrib.auth.models import User

updated_on = models.DateTimeField(auto_now= True)
created_on = models.DateTimeField(auto_now_add=True)

# گفته نشده هنوز مطالب پایین
'DIRS': [os.path.join(BASE_DIR,'templates')],

STATIC_URL = '/static/'
STATICFILES_DIRS = [
  # os.path.join(BASE_DIR, "static"),
  str(BASE_DIR / "static"),
]
STATIC_ROOT = '/home/safinero/nejat.safine.co/static'

# MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# MEDIA_ROOT =  str(BASE_DIR /'media')


>> new_user= User(username="maktabsharif60",first_name="maktab",last_name="sharif",email="maktab_sharifi@gmail.com",password="mamamamdfKFLSDLK",is_active=True)
>>> tag_1 = Tag(title='first tag')
>>> tag_2 = Tag(title='second tag')
>>> tag_1.save()
>>> tag_2.save()


from post.models import  Tag,Post,Comment,Category
>>> all_post = Post.objects.all()
>>> all_post[0]



لینک اپشن های مدل :  همون class Meta
https://docs.djangoproject.com/en/3.2/ref/models/options/

#user django doc 
https://docs.djangoproject.com/en/3.2/ref/contrib/auth/.




#بحث های فردا
کوییز کوچولو
صحبت در مورد manager *
صحبت در مورد lazy بودن *
related_name  *
m2m *
start template
F expersion *
Q 
توضیح درمورد چگونه کپی گرفتن instance
لینک توضیح کوئری ها
https://docs.djangoproject.com/en/3.2/topics/db/queries/

لینک توضیح m2m
https://docs.djangoproject.com/en/3.2/topics/db/examples/many_to_many/  

# لینک های برای lazy model
https://www.oreilly.com/library/view/django-2-by/9781788472487/c0d84fbe-ed96-47e5-b185-cf86335da8d6.xhtml
https://stackoverflow.com/questions/20171736/when-is-a-django-queryset-evaluated


# querySet and when QuerySet evaluated ?
https://docs.djangoproject.com/en/3.2/ref/models/querysets/


مثال ساخت متد
# https://docs.djangoproject.com/en/3.2/ref/models/instances/
https://docs.djangoproject.com/en/3.2/topics/db/models/#model-methods



# توضیح درمورد منجر
https://docs.djangoproject.com/en/3.2/topics/db/managers/#django.db.models.Manager
https://stackoverflow.com/questions/14689237/what-is-a-manager-in-django

https://docs.djangoproject.com/en/3.2/topics/db/queries/#retrieving-objects
در لینک فوق نشون میده querysets چیه و یه سری توضیح خوب 
قسمت Retrieving objects¶ خوانده شود


templates 
https://docs.djangoproject.com/en/3.2/intro/tutorial03/



project shop

product model
  status = a/d/s

  available :  کالاهایی که دارای وضعیت فعال هستند
  disavailable : کالاهای ناموجود
  stop : کالاهای متوقف شده

product.objects.filter(status="available")
product.available.all()
product.disavailable.all()


select * from comment 
join post on 
where post.title = "maktab"

a1 = Article.objects.get(id=1)
a1.reporter_set.filter(first_name='John')

>>> Article.objects.filter(reporter__first='John')

Comment.objects.filter(post__title = "maktab")



Article model
  reporter

reporter model
  user

user model
  name

a.objects.filter(reporter__user__name__contains='sina')


Reporter.objects.order_by('?')
Reporter.objects.order_by('first_name')
Reporter.objects.order_by('-first_name')





select * form book where price-discount >0

Book.objects.all()

sum_price/count

select avg(price) from book


select avg(price) from book group by publisher.id



a    a_b     b



book 
  ...
  price 25000
  discount_percent 10%



کتاب هایی را میخواهم که میزان تخفیف کتاب بیشتر از ۲۰۰۰ هزار تومن است.

select * from book where  (discount_percent *price) >2000

Book.objects.filter(discount_percent__gt = F(discount_percent)*price)






مدل 
افزودن داده 
چگونه یک instances  ذخیره شده رو کپی کنیم
m2m -->add/delete/update
1 2many - add/delete/update


# جلسه 27 آبان 
django view
توضیح که چیه ؟
مثال ساده بریم حل کنیم 


# 9 nov


view function base
view class base (temp/list/detail)
static 
template (block /if /with/for/ object_list(listview) ,filter (e.x : {{update_on | date}}))
url
dir template / static
add theme
simple form 

slug ---> slugfy
media



# 25 november

media 
steps : 
  add media MEDIA_ROOT and MEDIA_URL
  add path to main urls.py
  add below code on settings.py
  MEDIA_ROOT =  str(BASE_DIR /'media')
  MEDIA_URL = '/media/'

forms :
  forms.form
  forms.ModelForm
  template form
  def clean on form

# authenticate
  # simple custom login
  # simple custom register 
  # simple custom set new password

#start
# 2 december

1.django message 
https://docs.djangoproject.com/en/3.2/ref/contrib/messages/

####
https://docs.djangoproject.com/en/3.2/topics/class-based-views/generic-display/
https://docs.djangoproject.com/en/3.2/ref/class-based-views/generic-display/#django.views.generic.detail.DetailView
2.ListView
  2.1 get_context_data
  2.2 get_queryset

3.DetailView
  3.1 get_context_data
  3.2 get_queryset
  3.3 get_object

4. View
  https://docs.djangoproject.com/en/3.2/topics/class-based-views/intro/

5.Login Required ClassView  
  https://docs.djangoproject.com/en/3.2/topics/auth/default/#django.contrib.auth.mixins.LoginRequiredMixin

5. Custom User
  https://testdriven.io/blog/django-custom-user-model/

6. Form  Css class 
  question : https://stackoverflow.com/questions/401025/define-css-class-in-django-forms
  refrence : https://github.com/jazzband/django-widget-tweaks
  sample : https://simpleisbetterthancomplex.com/2015/12/04/package-of-the-week-django-widget-tweaks.html

    {{form.title}}
    {{ form.title|add_class:"form-control" }}
    {% render_field form.title class+="form-control sample" placeholder=form.title.label %}
   



#end


def login_maktab(request):
    print('next  to ',request.GET)
    form = LoginForm()
    if request.method == "POST":
        form = LoginForm(request.POST)
        if form.is_valid():
            user = authenticate(username= form.cleaned_data.get('username'),password= form.cleaned_data.get('password'))
            if user is not None :
                login(request,user)
                print('next  to ',request.GET.get('next'))
                print('next  to ',request.GET)
                print('next  to ',request.POST)
                print('next  to ',request.path)
                print('next  to ',request.method)

                # return redirect(reverse('tag-mk')) #
                return redirect(request.GET.get('next')) #
            
            print('user :',user)

            # cleaned_data
    return render(request,'maktab60/forms/login.html' ,{'form':form})


 {% if request.GET %}
        
            <form action="{% url 'login-mk' %}?next={{request.GET.next}} " method="post">
        {% else %}
            <form action="{% url 'login-mk' %} " method="post">
        {% endif %}
                {% csrf_token %}
                {{ form.as_p }}
                <input type="submit" value="login">
                
                
            </form>
    
 
 
 
 # start 
 # 9 december
 https://programmer.help/blogs/django-log-output-to-log-file.html
 
 import logging
logger = logging.getLogger('django
 def testlog(request):
    test = Category.objects.all()
    print('test')
    logger.error('Something went wrong!')
    print('test ::::::',test)
    return HttpResponse('yhes')
 
LOGGING ={
    'version':1,
    'disable_existing_loggers': True,

    'loggers':{
        'django':{
            'handlers':['file'],
            'level':'DEBUG'
        },
        'django.db.backends':{
            'handlers':['file2'],
            'level':'DEBUG'
        }
    },
    'handlers':{
        'file':{
            'level':'INFO',
            'class': 'logging.FileHandler',
            'filename':'./logs/debug5.log',
            'formatter':'simpleRe',
        },
        'file2':{
            'level':'DEBUG',
            'class': 'logging.FileHandler',
            'filename':'./logs/debug6.log',
            'formatter':'simpleRe2',
        }
    },
    'formatters':{
        'simpleRe': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simpleRe2': {
            'format': '{duration} {sql} {params} ',
            'style': '{',
        }

    }
}
# end
